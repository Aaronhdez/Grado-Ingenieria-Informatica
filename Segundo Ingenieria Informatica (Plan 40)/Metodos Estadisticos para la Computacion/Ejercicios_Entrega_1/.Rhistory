x2 <- peso[sexo=="F"]
limitesup_p2<-quantile(x2,.85)
limiteinf_p2<-quantile(x2,.15)
p2_corregido<-x2
p2_corregido[p2_corregido<limiteinf_p2] <-limiteinf_p2
p2_corregido[p2_corregido>limitesup_p2] <-limitesup_p2
boxplot(p_corregido,p2_corregido, col="grey")
abline(h=median(p2_corregido), col="red", lty=2, lwd=2)
#Plot con las muestras en funcion de la altura declarada con la medida
x3 <- altura_m[sexo=="F"]
limitesup_a<-quantile(x3,.85)
limiteinf_a<-quantile(x3,.15)
a_corregido<-x3
a_corregido[a_corregido<limiteinf_a] <-limiteinf_a
a_corregido[a_corregido>limitesup_a] <-limitesup_a
x4 <- altura[sexo=="F"]
limitesup_a2<-quantile(x4,.85)
limiteinf_a2<-quantile(x4,.15)
a2_corregido<-x4
a2_corregido[a2_corregido<limiteinf_a2] <-limiteinf_a2
a2_corregido[a2_corregido>limitesup_a2] <-limitesup_a2
boxplot(a_corregido,a2_corregido, col="grey")
abline(h=median(a2_corregido), col="red", lty=2, lwd=2)
abline(h=median(a_corregido), col="blue", lty=2, lwd=2)
grid()
install.packages("lubridate")
#empezamos el trabajo
setwd("./Archivos")
#empezamos el trabajo
setwd("./")
ls
setwd(/Archivos)
setwd(Archivos)
getwd()
setwd('..')
getwd()
setwd(Archivos)
#empezamos el trabajo
setwd("./Users/Usuario/Desktop/Ejercicios/R")
setwd(../)
setwd('../')
getwd()
#empezamos el trabajo
setwd("../Archivos")
#empezamos el trabajo
setwd("../")
#empezamos el trabajo
setwd("../")
datos_empleados <- read.table("Archivos/empleados.txt",sep = ",", header = TRUE)
getwd()
set(C:/Users/Usuario/Desktop/Ejercicios/R)
set('C:/Users/Usuario/Desktop/Ejercicios/R')
setwd('C:/Users/Usuario/Desktop/Ejercicios/R')
#empezamos el trabajo
setwd("../")
datos_empleados <- read.table("Archivos/empleados.txt",sep = ",", header = TRUE)
datos_salarios <- read.table("Archivos/salarios.txt",sep = "\t",header = TRUE)
#APARTADO 1
##Analizar el contenido de los Data Frames con los comandos tail() y head()
head(datos_empleados)
tail(datos_empleados)
head(datos_salarios)
tail(datos_salarios)
#APARTADO 2
##Razonar sobre los tipos de datos que lo integran (factores y vectores).
summary(datos_empleados)
summary(datos_salarios)
#APARTADO 3
tapply(datos_salarios$Salario,datos_salarios$Num_Empleado,mean)
tapply(datos_salarios$Salario,datos_salarios$Num_Empleado,median)
tapply(datos_salarios$Salario,datos_salarios$Num_Empleado,sd)
#Creamos una tabala nueva con la media de los salarios por numero de empleado
VectorSalario<-c(tapply(datos_salarios$Salario,datos_salarios$Num_Empleado,mean))
SueldoMax<-which.max(VectorSalario)
SueldoMin<-which.min(VectorSalario)
#APARTADO 4
VectorSalario<-as.numeric(datos_salarios$Salario)
VectorEmpleado<-as.numeric(datos_salarios$Num_Empleado)
boxplot(VectorSalario~VectorEmpleado,ylab="Salario Medio",xlab="Nº de Empleado", col="green")
#APARTADO 5
#Combinamos las dos tablas en una nueva y sobre esta un dataframe
tablanew<-merge(datos_salarios,datos_empleados)
datos_c<-data.frame(tablanew)
#Lo anclamos
attach(tablanew)
#apartado c
tapply(Salario,Num_Empleado,mean)
tapply(Salario,Num_Empleado,median)
tapply(Salario,Num_Empleado,sd)
VSalario<-c(tapply(Salario,Num_Empleado,mean))
PMax<-which.max(VSalario)
PMin<-which.min(VSalario)
VectorSalarionew<-as.numeric(Salario)
VectorEmpleadonew<-as.numeric(Num_Empleado)
boxplot(VectorSalarionew~VectorEmpleadonew,
ylab="Salario Medio (combinados)",
xlab="Nº de Empleado (combinada)",
col="red")
detach()
#APARTADO 6
##Con los comandos interval() , now() y ymd() del paquete lubridate, determinar
##la edad de los diez empleados y añadir una nueva columna con el campo
##Edad" al data frame resultante del apartado anterior
attach(tablanew)
library(lubridate)
current<-as.Date(now())
vectorFechas<-c(as.Date(Fecha_nacimiento))
Años<-c(year(current)-year(vectorFechas))
datosEdad<-data.frame(Num_Empleado=Num_Empleado,Edad=Años)
tablanew<-merge(tablanew,datosEdad)
prueba<-data.frame(tablanew)
detach()
attach(tablanew)
aggregate(Edad~Num_Empleado,prueba,mean)
#APARTADO 7
##Anadir un nuevo registro al data frame del apartado e). Explicar en detalle el
##proceso.
##Tiempo de trabajo en semanas según el contrato de cada cliente en semanas laborales
from<-c(as.Date(Desde_Fecha))
to<-c(as.Date(Fecha_Contrato))
workingWeeks<-c(difftime(to,from, units = "days"))
workingWeeksArray<-as.numeric(workingWeeks,"days")
workingWeeksArray<-workingWeeksArray/5
tablanew<-cbind(tablanew,Semanas_Contrato=workingWeeksArray)
kable(tablanew)
#Iniciamos el espacio de trabajo en Nuestro directorio de proyecto
#setwd()
setwd(".")
library(sqldf)
library(knitr)
#Cargamos el dataset Correspondiente de casa.txt en una variable
Datcasas<-read.table("/Archivos/casas.txt", header=T, dec=',', sep="\t")
getwd
getwd()
#Cargamos el dataset Correspondiente de casa.txt en una variable
Datcasas<-read.table("Archivos/casas.txt", header=T, dec=',', sep="\t")
#Anclamos la variable Datcasas para   tener su datos disponibles.
attach(Datcasas)
#Revisamos con kable que hemos tomado la tabla correcta.
kable(Datcasas)
#Creamos nuestro vector precio
Datca_precios<-c(Precio)
#Generamos uns tabla de frecuencias de precios
ftable(Datca_precios)
#Generamos una variable de A con la funci?n RANK y hacemos kable sobre ella
pre_rango<-rank(Datca_precios)
kable(pre_rango)
#Genarmos una variable de B con la funci?n SORT y hacemos kable sobre ella
pre_sort<-sort(Datca_precios)
kable(pre_sort)
#Genarmos una variable de C con la funci?n ORDER y hacemos kable sobre ella
c<-order(Datca_precios)
Loc_orden<-Localizacion[order(Precio)]
kable(Loc_orden)
#Generamos un dataframe final con lo anterior.
pre_orden<-data.frame(Loc_orden,pre_sort,pre_rango)
#cambiamos los nombres de las columnas
names(pre_orden)<-c("Localizacion","Precios","Ranking")
kable(pre_orden)
#Ahora,usando sqldf,generamos tres tablas nueva que provenga de una consulta SQL para aquellas
#cuyo precio sea mayor que 190, clasificadas por precio de mayor a menor y por orden y rango.
library(sqldf)
Compara_mas190<-sqldf("SELECT * FROM pre_orden WHERE Precios > 190 ORDER BY Precios DESC")
kable(Compara_mas190)
Compara_Pre_maymen<-sqldf("SELECT * FROM pre_orden ORDER BY Precios DESC")
kable(Compara_Pre_maymen)
Compara_Pre_rank<-sqldf("SELECT * FROM pre_orden ORDER BY Rango ASC")
kable(Compara_Pre_rank)
#Por ultimo crearemos una columna que a?adiremos al nuevo dataframe donde se indique la desviacion
#porcentual respecto al precio medio
detach()
attach(pre_orden)
#Calcuylamos la media y la desviaci?n
mediapre<-mean(Precios)
mediapre
desv_pre<-mediapre-Precios
porcen<-(mediapre-Precios)/Precios
desv<-porcen*100
#A?adimos la columna a un nuevo dataframe
Compara_desv<-data.frame(Localizacion,Precios,Ranking)
Compara_desv<-cbind(Compara_desv,desv,desv_pre)
names(Compara_desv)<-c("Localizaci?n","Precios","Ranking","Desv","Montante")
Compara_Pre_rank<-sqldf("SELECT * FROM pre_orden ORDER BY Rango ASC")
Compara_Pre_rank<-sqldf("SELECT * FROM pre_orden ORDER BY Ranking ASC")
kable(Compara_Pre_rank)
#Por ultimo crearemos una columna que a?adiremos al nuevo dataframe donde se indique la desviacion
#porcentual respecto al precio medio
detach()
attach(pre_orden)
#Calcuylamos la media y la desviaci?n
mediapre<-mean(Precios)
mediapre
desv_pre<-mediapre-Precios
porcen<-(mediapre-Precios)/Precios
desv<-porcen*100
#A?adimos la columna a un nuevo dataframe
Compara_desv<-data.frame(Localizacion,Precios,Ranking)
Compara_desv<-cbind(Compara_desv,desv,desv_pre)
names(Compara_desv)<-c("Localizaci?n","Precios","Ranking","Desv","Montante")
kable(Compara_desv)
# Buscamos las viviendas cuya desviaci?n de precio est? e un rango del 15% respecto a la media
# Generamos una tabla.
x<-sqldf("SELECT * FROM Compara_desv where Desv < 15 AND Desv > -15 ORDER BY DESV")
kable(x)
setwd(".")
library(knitr)
accidentes<-read.table("Archivos/Accidentes_1969_1984_UK.txt", header=T, dec=',', sep=",")
#a) Analizar la serie temporal de fallecidos en accidentes, encontrar
# sus zonas de valor maximo y visualziar el efecto de entrada en vigor de la ley
attach(accidentes)
kable(accidentes[1:10,])
n<-length(law)
kable(accidentes[n-10:n,])
#Generamos el plot.
plot(1:length(DriversKilled), DriversKilled,
xaxt="n", type="l",
col="orange",xlab="Meses(años 1969-19)",
ylab="Num. falllecidos")
years<-seq(1969,1985,1)
axis(1,at=seq(1,length(DriversKilled)+12,12),
lablels <-as.character(years))
grid()
#Establecemos la fecha de apliación de la ley.
Febrero_83<-(1983-1969)*12+2
abline(v=Febrero_83, col="red",lwd=2)
#Creamos las medias de la apliación de la ley.
media_no_ley<-mean(DriversKilled[1:Febrero_83])
media_ley<-mean(DriversKilled[Febrero_83:length(DriversKilled)])
#Line(c(x1x2),c(y1,y2),)
lines(c(0,Febrero_83),c(media_no_ley,media_no_ley), col="blue")
lines(c(Febrero_83,192),c(media_ley,media_ley), col="red")
#Creamos un boxplot de mabas antes y después de la aplicación de la ley.
boxplot(DriversKilled~law,
xlab="Con(1) y Sin(0) apliación de la ley",
ylab="Num Fallecidos/mes", col="orange")
grid()
#Generamos el plot.
plot(DriversKilled,front, col="blue",
ylim=c(0,max(front)), text(80,180,label="Prueba"))
grid()
modelo1<-lm(front~DriversKilled)
abline(modelo1,col="lightblue",lwd=2)
points(DriversKilled,rear, col="red")
modelo2<-lm(rear~DriversKilled)
abline(modelo2,col="pink",lwd=2)
#Generamos el segundo plot con los puntos.(ANTES DE LA LEY)
plot(DriversKilled[law==0],front[law==0], col="blue",
ylim=c(0,max(front)), pch=2)
grid()
modelo1<-lm(front[law==0]~DriversKilled[law==0])
abline(modelo1,col="lightblue",lwd=2)
points(DriversKilled,rear, col="red", pch=19)
modelo2<-lm(rear[law==0]~DriversKilled[law==0])
abline(modelo2,col="pink",lwd=2)
#Generamos el segundo plot con los puntos.(DESPUES DE LA LEY)
plot(DriversKilled[law==1],front[law==1], col="blue",
ylim=c(0,max(front)), pch=2)
grid()
modelo1<-lm(front[law==1]~DriversKilled[law==1])
abline(modelo1,col="lightblue",lwd=2)
points(DriversKilled,rear, col="red", pch=1)
modelo2<-lm(rear[law==1]~DriversKilled[law==1])
abline(modelo2,col="pink",lwd=2)
#Generamos el plot.
plot(1:length(VanKilled), VanKilled,
xaxt="n", type="l",
col="purple",xlab="Meses(años 1969-19)",
ylab="Num. fallecidos (Furgonetas)")
years<-seq(1969,1985,1)
axis(1,at=seq(1,length(VanKilled)+12,12),
lablels <-as.character(years))
grid()
#Generamos el boxplot de furgonetas
#Establecemos la fecha de apliación de la ley.
Febrero_83<-(1983-1969)*12+2
abline(v=Febrero_83, col="green2",lwd=2)
#Creamos las medias de la apliación de la ley.
media_no_ley_f<-mean(VanKilled[1:Febrero_83])
media_ley_f<-mean(VanKilled[Febrero_83:length(DriversKilled)])
#Creamos las lineas de las medias.
lines(c(0,Febrero_83),c(media_no_ley_f,media_no_ley_f), col="blue")
lines(c(Febrero_83,192),c(media_ley_f,media_ley_f), col="red")
boxplot(VanKilled~law,
xlab="Antes(0) y después(1) apliación de la ley",
ylab="Num Fallecidos en furgonetas/mes", col="purple")
#Iniciamos el espacio de trabajo en Nuestro directorio de proyecto
setwd(".")
library(knitr)
#Cargamos el dataset Correspondiente de casa.txt en una variable
Ventas<-read.table("Archivos/Ventas_Provincia.txt", header=T, sep=',', dec='.', stringsAsFactors=F)
kable(Ventas)
attach(Ventas)
names(Ventas)
## APARTADO A
#Creamos el factor determinante de la tabla
provincias<-(Provincia)
fprovincia<-as.factor(provincias)
levels(fprovincia)
#Tabla con las medias anuales
t_medias<-aggregate(Total_Ventas~Provincia,Ventas,mean)
kable(t_medias)
#Tabla con las sumas anuales
t_suma<-aggregate(Total_Ventas~Provincia,Ventas,sum)
kable(t_suma)
detach()
## APARTADO B
#Seleccionamos la provincia que vende mas y la que menos vende
attach(t_suma)
t_suma[which.max(t_suma[,2]),]
#max<-Provincia[which.max(Total_Ventas)]
#max
t_suma[which.min(t_suma[,2]),]
#min<-Provincia[which.min(Total_Ventas)]
#min
detach()
## APARTADO C
#Seleccionamos de la tabla una nuevo dataframe con SQL según lso requerimientos pedidos
library(sqldf)
Ventas2dosem<-sqldf("SELECT * FROM Ventas where Provincia='Barcelona' OR Provincia='Caceres' OR Provincia='Madrid'")
Ventas2dosem<-sqldf("SELECT * FROM Ventas2dosem where Year_Mes > '2012-06-01'")
kable(Ventas2dosem)
detach()
## APARTADO D
attach(Ventas2dosem)
mesdata<-as.Date(Year_Mes)
meses<-unique(mesdata)
#Puntos Barcelona
plot(meses,Total_Ventas[Provincia=="Barcelona"],
ylim=c(0,max(Total_Ventas)),type = "b",
col = "red", xlab = "Segundo Semestre",
ylab = "Ventas", pch=15)
#Puntos Caceres
points(meses,Total_Ventas[Provincia=="Caceres"],
ylim=c(0,max(Total_Ventas)),type = "b",
col = "yellow", pch=19)
#Puntos Madrid
points(meses,Total_Ventas[Provincia=="Madrid"],
ylim=c(0,max(Total_Ventas)),type = "b",
col = "blue", pch=2)
grid()
## Boxpot del Ventas2osem
boxplot(Total_Ventas~Provincia)
## APARTADO E
#Creamos la varible g
library(ggplot2)
g<-ggplot(data=Ventas2dosem, aes(x=Year_Mes,
y=Total_Ventas,
group=Provincia,
colour=Provincia))
g2<-g + geom_point(size=2)
g2<-g2 + geom_line(size=1)
g2<-g2 + xlab("Meses")
g2<-g2 + ylab("Cantidad")
g2<-g2 + ggtitle("Ventas segundo semestre")
g2
## APARTADO F con grafica
g3<-ggplot(data=Ventas2dosem, aes(x=Year_Mes,
y=Total_Ventas,
group=Provincia,
colour=Provincia))
g3<-g3 + geom_bar(stat="identity",
aes(fill=Provincia),
position="dodge")
g3<-g3 + xlab("Meses")
g3<-g3 + ylab("Cantidad")
g3<-g3 + ggtitle("Ventas segundo semestre")
g3
## APARTADO F con boxplot
g4<-ggplot(data=Ventas2dosem, aes(x=Year_Mes,
y=Total_Ventas,
group=Provincia,
colour=Provincia))
g4<-g4 + geom_boxplot()
g4<-g4 + xlab("Meses")
g4<-g4 + ylab("Cantidad")
g4<-g4 + ggtitle("Ventas segundo semestre")
g4
## APARTADO F con violin plot
g5<-ggplot(data=Ventas2dosem, aes(x=Year_Mes,
y=Total_Ventas,
group=Provincia,
colour=Provincia))
g5<-g5 + geom_violin()
g5<-g5 + xlab("Meses")
g5<-g5 + ylab("Cantidad")
g5<-g5 + ggtitle("Ventas segundo semestre")
g5
setwd(".")
library(ggplot2)
library(knitr)
datosestudiantes<-read.table("Archivos/Datos_hsb.txt", sep = ",",dec = ".",header = T)
#a) Calcular las medias de progreso por las distintas categorías y razonar posibles
conclusiones
#Generamos una tabla con aggregate indicando las diferentes asignaturas en funcion de los elementos pedidos
media_mt<-aggregate(cbind(P_Lectura,P_Matematicas,P_Ciencias,P_Escritura,P_Sociales)~Raza+Sexo+Estatus_Socieconomico,data = datosestudiantes,mean)
kable(media_mt)
#Generamos cada uno de nuestros plots
g0<-ggplot(data = datosestudiantes, aes(x=Tipo_Escuela,y=P_Matematicas))
g1<- g0+geom_boxplot()+aes(colour=Sexo)+xlab("Centro")+ylab("Nota Matemáticas")+ggtitle("Puntuaciones según centro de aprendizaje (EEUU)")
g1
g2<-ggplot(data = datosestudiantes, aes(x=Tipo_Escuela,y=P_Sociales))
g3<-g2+geom_boxplot()+aes(colour=Sexo)+xlab("Centro")+ylab("Ciencias Sociales")+ggtitle("Puntuaciones según centro de aprendizaje (EEUU)")
g3
g4<-ggplot(data = datosestudiantes, aes(x=Tipo_Escuela,y=P_Lectura))
g5<-g4+geom_boxplot()+aes(colour=Sexo)+xlab("Centro")+ylab("Lectura")+ggtitle("Puntuaciones según centro de aprendizaje (EEUU)")
g5
g6<-ggplot(data = datosestudiantes, aes(x=Tipo_Escuela,y=P_Escritura))
g7<-g6+geom_boxplot()+aes(colour=Sexo)+xlab("Centro")+ylab("Escritura")+ggtitle("Puntuaciones según centro de aprendizaje (EEUU)")
g7
g8<-ggplot(data = datosestudiantes, aes(x=Tipo_Escuela,y=P_Ciencias))
g9<-g8+geom_boxplot()+aes(colour=Sexo)+xlab("Centro")+ylab("Ciencias")+ggtitle("Puntuaciones según centro de aprendizaje (EEUU)")
g9
g10<-ggplot(data = datosestudiantes, aes(x=P_Lectura, y=P_Matematicas))
g11<- g10+geom_boxplot()+aes(colour=Sexo)+xlab("Destreza en Lectura")+ylab("Matemáticas (0-100)")+ggtitle("Resultados del aprendizaje")
g11
g12<-ggplot(data = datosestudiantes, aes(x=P_Lectura,y=P_Sociales))
g13<-g12+geom_boxplot()+aes(colour=Sexo)+xlab("Destreza en Lectura")+ylab("Sociales (0-100)")+ggtitle("Resultados del aprendizaje")
g13
g14<-ggplot(data = datosestudiantes, aes(x=P_Lectura,y=P_Escritura))
g15<-g14+geom_boxplot()+aes(colour=Sexo)+xlab("Destreza en Lectura")+ylab("Escritura (0-100)")+ggtitle("Resultados del aprendizaje")
g15
g16<-ggplot(data = datosestudiantes, aes(x=P_Lectura,y=P_Ciencias))
g17<-g16+geom_boxplot()+aes(colour=Sexo)+xlab("Destreza en Lectura")+ylab("Ciencias (0-100)")+ggtitle("Resultados del aprendizaje")
g17
g18<- g0+geom_boxplot()+xlab("Tipo de Centro")+ylab("Matemáticas (0-100)")+ggtitle("Puntuaciones en relación con la raza")
g18 <- g18+aes(colour=Sexo)+facet_wrap(~Estatus_Socieconomico)
g18
g19<- g2+geom_boxplot()+xlab("Tipo de Centro")+ylab("Sociales (0-100)")+ggtitle("Puntuaciones en relación con la raza")
g19<-g19+aes(colour=Sexo)+facet_wrap(~Estatus_Socieconomico)
g19
g20<-g4+geom_boxplot()+xlab("Tipo de Centro")+ylab("Lectura (0-100)")+ggtitle("Puntuaciones en relación con la raza")
g20<-g20+aes(colour=Sexo)+facet_wrap(~Estatus_Socieconomico)
g20
g21<-g6+geom_boxplot()+xlab("Tipo de Centro")+ylab("Escritura (0-100)")+ggtitle("Puntuaciones en relación con la raza")
g21<-g21+aes(colour=Sexo)+facet_wrap(~Estatus_Socieconomico)
g21
g22<-g8+geom_boxplot()+xlab("Tipo de Centro")+ylab("Ciencias (0-100)")+ggtitle("Puntuaciones en relación con la raza")
g22<-g22+aes(colour=Sexo)+facet_wrap(~Estatus_Socieconomico)
g22
g30<-g18+facet_wrap(~Raza)
g30
g31<-g19+facet_wrap(~Raza)
g31
g32<-g20+facet_wrap(~Raza)
g32
g33<-g21+facet_wrap(~Raza)
g33
g34<-g22+facet_wrap(~Raza)
g34
#Iniciamos el espacio de trabajo en Nuestro directorio de proyecto
setwd(".")
library(knitr)
library(carData)
library(ggplot2)
xaxis <- seq(from=0, to=10, by=0.1)
yaxis<- (xaxis)^2 + 3*xaxis + 4
cX<-xaxis
cY<-yaxis
xinf<-0.1
cX<-xaxis
cY<-yaxis
xinf<-0.1
xsup<-9.9
incr<-0.1
plot_scale <- function(x,y,x1,x2,inc){
if(length(x) != length(y)) stop("La dimensión en los vectores no es la misma")
if(!is.numeric(x1)) stop("ERROR: Entrada no numerica")
if(!is.numeric(x2)) stop("ERROR:Entrada no numérica")
plot(x,y, col = 'grey')
n1<-as.integer(x1/inc)
n2<-as.integer(x2/inc)
#Generamos las coordenadas de las x para el poligono.
curva_x<- seq(x1,x2,inc)
traza_x<-c(x1, curva_x,x2)
#Generamos las coordenadas de las y.
curva_y <- y[n1:(n1 + length(curva_x)-1)]
traza_y<-c(0,curva_y, 0)
polygon(traza_x, traza_y, col = '#ffff00')
}
plot_scale(xaxis,yaxis,xinf,xsup,incr)
grid()
# FUNCION MEJORADA
plot_scale <- function(x,y,x1,x2,inc){
if(length(x) != length(y)) stop("La dimensión en los vectores no es la misma")
if(!is.numeric(x1)) stop("ERROR: Entrada no numerica")
if(!is.numeric(x2)) stop("ERROR:Entrada no numérica")
plot(x,y, main = 'Gráfica de ejemplo', xlab = 'X axis', ylab = 'Y axis', col = 'grey')
n1<-as.integer(x1/inc)
n2<-as.integer(x2/inc)
curva_x<- seq(x1,x2,inc)
curva_y <- y[n1:(n1 + length(curva_x)-1)]
traza_x<-c(x1, curva_x,x2)
traza_y<-c(0,curva_y, 0)
polygon(traza_x, traza_y, col = '#ff1100')
}
plot_scale(xaxis,yaxis,xinf,xsup,incr)
grid()
xaxis<-seq(from=0, to=10, by=0.5)
yaxis<-(xaxis)^2 + 3*xaxis + 4
funcion_parab<-data.frame(xaxis,yaxis)
funcion_parab_ajustada<-funcion_parab[funcion_parab$xaxis>2,]
funcion_parab_ajustada<-funcion_parab_ajustada[funcion_parab_ajustada$xaxis<4,]
attach(funcion_parab)
g<-ggplot(data = funcion_parab, mapping = aes(x=xaxis, y=yaxis))
g2<-g + geom_line()
g2<-g2 + xlab("X axis")
g2<-g2 + ylab("Y axis")
g2<-g2 + ggtitle("Función con zona rellena por geom_area()")
g2<-g2 + geom_area(data=funcion_parab_ajustada, mapping = aes(fill = 'red'))
g2
detach()
load("C:/Users/Usuario/Desktop/Ejercicios/.RData")
