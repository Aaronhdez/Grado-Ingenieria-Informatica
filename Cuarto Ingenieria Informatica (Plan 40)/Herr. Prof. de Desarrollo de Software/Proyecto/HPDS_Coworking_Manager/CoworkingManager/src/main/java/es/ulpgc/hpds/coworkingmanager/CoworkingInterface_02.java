/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.ulpgc.hpds.coworkingmanager;

import es.ulpgc.hpds.environment.Actuator;
import es.ulpgc.hpds.environment.Sensor;
import es.ulpgc.hpds.environment.actuator.ActuatorAPI;
import es.ulpgc.hpds.environment.actuator.ActuatorRGB;
import es.ulpgc.hpds.environment.actuator.Led;
import es.ulpgc.hpds.environment.sensors.ApiSensor;
import es.ulpgc.hpds.environment.sensors.ProximitySensor;
import es.ulpgc.hpds.environment.sensors.UsedSensor;
import es.ulpgc.hpds.environment.sensors.WeightSensor;
import es.ulpgc.hpds.fx.DeskPanel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author Usuario
 */
public class CoworkingInterface_02 extends javax.swing.JFrame {

    private ArrayList<DeskPanel> panelsToUpdate;
    private ArrayList<Desk> desksToUpdate;
    private ArrayList<Led> ledsToMonitor;
    private HashMap<Desk, ArrayList<Sensor>> sensorsToUpdate;
    private CoworkingManager coworkingManager;
    static Random apiRng;
    static Random weightRng;
    static Random usedRng;
    static Random proximityRng;
    private Timer timer;

    /**
     * Creates new form CoworkingInterface_02
     */
    public CoworkingInterface_02() {
        initComponents();
        initStaticLists();
        initInterface();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desksPanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        endButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        desksPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        desksPanel.setLayout(new java.awt.GridLayout(3, 4, 10, 10));

        buttonsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        startButton.setText("Iniciar Simulaci√≥n");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        endButton.setText("Parar");
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 358, Short.MAX_VALUE)
                .addComponent(endButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(desksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(desksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        this.timer = new Timer();
        setTimerTask();
        this.startButton.setEnabled(false);
        this.endButton.setEnabled(true);
    }//GEN-LAST:event_startButtonActionPerformed

    private void endButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endButtonActionPerformed
        this.timer.cancel();
        this.timer.purge();
        this.timer = null;
        this.endButton.setEnabled(false);
        this.startButton.setEnabled(true);
    }//GEN-LAST:event_endButtonActionPerformed

    private void initStaticLists() {
        this.panelsToUpdate = new ArrayList<>();
        this.desksToUpdate = new ArrayList<>();
        this.sensorsToUpdate = new HashMap<>();
    }
    
    private void initInterface() {
        for (int i = 1; i <= 12; i++) {
            ArrayList<Sensor> sensorsAssociated = createSensors();
            Led ledAssociated = new Led();
            ArrayList<Actuator> actuatorsAssociated = createActuators(ledAssociated);
            Desk deskToMonitor = new Desk(sensorsAssociated, actuatorsAssociated);
            deskToMonitor.setName("Mesa " + i);
            DeskPanel deskPanelAssociated = new DeskPanel(deskToMonitor, ledAssociated);
            this.desksToUpdate.add(deskToMonitor);
            this.desksPanel.add(deskPanelAssociated);
            this.panelsToUpdate.add(deskPanelAssociated);
        }
        this.coworkingManager = new CoworkingManager(desksToUpdate);
    }

    private ArrayList<Sensor> createSensors() {
        ArrayList<Sensor> sensorsAssociated = new ArrayList();
        sensorsAssociated.add(new ApiSensor());
        sensorsAssociated.add(new WeightSensor(0));
        sensorsAssociated.add(new UsedSensor(false));
        sensorsAssociated.add(new ProximitySensor(20,-1));
        return sensorsAssociated;
    }

    private ArrayList<Actuator> createActuators(Led ledAssociated) {
        ArrayList<Actuator> actuatorsAssociated = new ArrayList();
        ActuatorRGB actuatorRGB = new ActuatorRGB(ledAssociated);
        ActuatorAPI actuatorApi = new ActuatorAPI();
        actuatorsAssociated.add(actuatorRGB);
        actuatorsAssociated.add(actuatorApi);
        return actuatorsAssociated;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CoworkingInterface_02.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CoworkingInterface_02.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CoworkingInterface_02.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CoworkingInterface_02.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CoworkingInterface_02();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JPanel desksPanel;
    private javax.swing.JButton endButton;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables

    private void setTimerTask() {
        TimerTask timerTask = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Comprobando mesas");
                coworkingManager.reload(desksToUpdate);
                updatePanels();
            }
        };
        timer.scheduleAtFixedRate(timerTask, 0, 2000);
    }

    void updatePanels() {
        for (DeskPanel deskPanel : panelsToUpdate) {
            deskPanel.reloadBackgroundColor();
        }
    }
}
