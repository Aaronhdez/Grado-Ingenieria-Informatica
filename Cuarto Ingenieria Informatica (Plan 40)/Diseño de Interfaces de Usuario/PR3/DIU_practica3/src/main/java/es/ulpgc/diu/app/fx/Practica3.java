/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.ulpgc.diu.app.fx;

import es.ulpgc.diu.model.DataChecker;
import es.ulpgc.diu.model.LanguageSelector;
import es.ulpgc.diu.model.MatrixFilter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Usuario
 */
public class Practica3 extends javax.swing.JFrame {

    private MatrixFilter matrixFilter;
    private DataChecker dataChecker;
    private DocumentListener upperBoundListener, lowerBoundListener;
    private LanguageSelector languageSelector;
    private String[] localisation;

    /**
     * Creates new form Practica3
     */
    public Practica3() {
        this.languageSelector = new LanguageSelector();
        this.localisation = this.languageSelector.setLangTo("ES");
        this.dataChecker = new DataChecker();
        initComponents();
        this.setLanguage();
        this.matrixFilter.loadDefaultMatrix();
        loadListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionsPanel = new javax.swing.JPanel();
        boundsPanel = new javax.swing.JPanel();
        lowerBoundLabel = new javax.swing.JLabel();
        lowerBoundField = new javax.swing.JTextField();
        upperBoundLabel = new javax.swing.JLabel();
        upperBoundField = new javax.swing.JTextField();
        errorField = new javax.swing.JTextArea();
        errorLabel = new javax.swing.JLabel();
        matrixResultPane = new es.ulpgc.diu.app.fx.MatrixResultPanel();
        jPanel1 = new javax.swing.JPanel();
        slidePanel = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        enLang = new javax.swing.JMenu();
        esLang = new javax.swing.JMenu();
        plLang = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Filtrador de Matriz");

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración"));
        optionsPanel.setPreferredSize(new java.awt.Dimension(372, 22));

        lowerBoundLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lowerBoundLabel.setText("Limite Inferior");

        lowerBoundField.setText("0");
        lowerBoundField.setToolTipText("Entero de 0 a 100 (por defecto es 100)");

        upperBoundLabel.setText("Limite Superior");

        upperBoundField.setText("10");
        upperBoundField.setToolTipText("Entero de 0 a 100 (Por defecto es 10)");

        errorField.setEditable(false);
        errorField.setColumns(20);
        errorField.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        errorField.setRows(5);
        errorField.setDisabledTextColor(new java.awt.Color(255, 51, 51));
        errorField.setEnabled(false);

        errorLabel.setText("Errores");

        javax.swing.GroupLayout boundsPanelLayout = new javax.swing.GroupLayout(boundsPanel);
        boundsPanel.setLayout(boundsPanelLayout);
        boundsPanelLayout.setHorizontalGroup(
            boundsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, boundsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(boundsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lowerBoundLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lowerBoundField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(upperBoundLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .addComponent(upperBoundField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorField, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        boundsPanelLayout.setVerticalGroup(
            boundsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boundsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lowerBoundLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lowerBoundField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(upperBoundLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(upperBoundField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(boundsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addComponent(boundsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Selector"));

        slidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jSlider1.setMajorTickSpacing(2);
        jSlider1.setMaximum(10);
        jSlider1.setMinorTickSpacing(1);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setToolTipText("Seleccione el umbral mínimo a mostrar (Por defecto es el Limite inferior)");
        jSlider1.setValue(0);

        javax.swing.GroupLayout slidePanelLayout = new javax.swing.GroupLayout(slidePanel);
        slidePanel.setLayout(slidePanelLayout);
        slidePanelLayout.setHorizontalGroup(
            slidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        slidePanelLayout.setVerticalGroup(
            slidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(slidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(slidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setText("Santiago Abraham Izquierdo Cubas, Aarón Hernández Álvarez");

        enLang.setText("EN");
        enLang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enLangMouseClicked(evt);
            }
        });
        jMenuBar1.add(enLang);

        esLang.setText("ES");
        esLang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                esLangMouseClicked(evt);
            }
        });
        jMenuBar1.add(esLang);

        plLang.setText("PL");
        plLang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                plLangMouseClicked(evt);
            }
        });
        jMenuBar1.add(plLang);

        setJMenuBar(jMenuBar1);

        this.matrixFilter = new MatrixFilter();
        this.matrixFilter.subscribe(matrixResultPane);
        this.matrixResultPane.display(matrixFilter);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matrixResultPane, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(matrixResultPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enLangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enLangMouseClicked
        localisation = languageSelector.setLangTo("EN");
        setLanguage();
    }//GEN-LAST:event_enLangMouseClicked

    private void esLangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_esLangMouseClicked
        localisation = languageSelector.setLangTo("ES");
        setLanguage();
    }//GEN-LAST:event_esLangMouseClicked

    private void plLangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_plLangMouseClicked
        localisation = languageSelector.setLangTo("PL");
        setLanguage();
    }//GEN-LAST:event_plLangMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Practica3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Practica3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Practica3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Practica3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Practica3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boundsPanel;
    private javax.swing.JMenu enLang;
    private javax.swing.JTextArea errorField;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JMenu esLang;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField lowerBoundField;
    private javax.swing.JLabel lowerBoundLabel;
    private es.ulpgc.diu.app.fx.MatrixResultPanel matrixResultPane;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JMenu plLang;
    private javax.swing.JPanel slidePanel;
    private javax.swing.JTextField upperBoundField;
    private javax.swing.JLabel upperBoundLabel;
    // End of variables declaration//GEN-END:variables
   
    
    private void loadListeners() {
        loadDocumentListeners();
        loadSliderListener();
    }
    
    //Documents Listener
    private void loadDocumentListeners() {
        this.upperBoundListener = this.generateBoundListener(this.upperBoundField, this.upperBoundListener);
        this.lowerBoundListener = this.generateBoundListener(this.lowerBoundField, this.lowerBoundListener);
        this.addDocumentListeners();
    }

    private void addDocumentListeners() {
        this.upperBoundField.getDocument().addDocumentListener(upperBoundListener);
        this.lowerBoundField.getDocument().addDocumentListener(lowerBoundListener);
    }

    private DocumentListener generateBoundListener(JTextField field, DocumentListener boundListener) {
        return new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                field.getDocument().removeDocumentListener(boundListener);
                processDataInput();
                field.getDocument().addDocumentListener(boundListener);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                field.getDocument().removeDocumentListener(boundListener);
                processDataInput();
                field.getDocument().addDocumentListener(boundListener);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        };
    }
    
    //Slider Listener
    private void loadSliderListener() {
        this.jSlider1.addChangeListener(new ChangeListener() {
                public void stateChanged(ChangeEvent event) {
                    matrixFilter.filterCurrentMatrix(jSlider1.getValue());
                }
            });
    }
    
    private void updateSlider(int lower, int upper) {
        this.jSlider1.setMinimum(lower);
        this.jSlider1.setMaximum(upper);
        setSliderTicks(lower, upper);
    }

    private void setSliderTicks(int lower, int upper) {
        //2,5,10,20
        int[] plausibleTickSteps = {1,2,3,4,5,6,7,8,9,10,20};
        int tickStep = 0;
        int inputInterval = upper-lower;
        for (int i = plausibleTickSteps.length-1; i >= 0; i--) {
            if((inputInterval % plausibleTickSteps[i]) < 1){
                tickStep = plausibleTickSteps[i];
                break;
            }
        }
        
        this.jSlider1.setValue(lower);
        this.setLabels(tickStep);
    }

    private void setLabels(int tickStep) {
        this.jSlider1.setMajorTickSpacing(tickStep);
        this.jSlider1.setMinorTickSpacing(1);
        this.jSlider1.setPaintLabels(true);
        this.jSlider1.setPaintTicks(true);
    }
    
    //Textprocessing and intervals update.
    //This method is executed iteratively
    private void processDataInput(){
        reloadErrors();
        String lowerBoundValue = this.lowerBoundField.getText();
        String upperBoundValue = this.upperBoundField.getText();
        String errors = "";
        
        if(!this.dataChecker.checkFormat(lowerBoundValue)) {
            errors += this.localisation[9];
        }
        if(!this.dataChecker.checkFormat(upperBoundValue)) {
            errors += this.localisation[10];
        }
        if(errors.length() > 0){
            setErrorsFieldText(errors);
            return;
        }
        
        if(!this.dataChecker.checkBounds(Integer.parseInt(lowerBoundValue), Integer.parseInt(upperBoundValue))){
            errors += this.localisation[11];
            setErrorsFieldText(errors);
            return;
        }
        
        if(Integer.parseInt(upperBoundValue) > 100){
            errors += this.localisation[12];
            setErrorsFieldText(errors);
            return;
        }
        
        if(Integer.parseInt(lowerBoundValue) < 0){
            errors += this.localisation[13];
            setErrorsFieldText(errors);
            return;
        }
        
        this.matrixFilter.reloadMatrix(Integer.parseInt(lowerBoundValue), Integer.parseInt(upperBoundValue));
        this.updateSlider(Integer.parseInt(lowerBoundValue), Integer.parseInt(upperBoundValue));
    }

    private void reloadErrors() {
        this.errorField.setText("");
    }

    private void setErrorsFieldText(String errors) {
        this.errorField.setText(errors);
    }
    
    //Language
    private void setLanguage(){
        //Panels
        this.optionsPanel.setBorder(BorderFactory.createTitledBorder(this.localisation[0]));
        this.matrixResultPane.setBorder(BorderFactory.createTitledBorder(this.localisation[1]));
        this.jPanel1.setBorder(BorderFactory.createTitledBorder(this.localisation[2]));
        
        //Labels
        this.upperBoundLabel.setText(this.localisation[3]);
        this.lowerBoundLabel.setText(this.localisation[4]);
        this.errorLabel.setText(this.localisation[5]);
        
        //Tooltips
        this.upperBoundField.setToolTipText(this.localisation[6]);
        this.lowerBoundField.setToolTipText(this.localisation[7]);
        this.jSlider1.setToolTipText(this.localisation[8]);
    };

}
